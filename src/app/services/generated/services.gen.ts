// This file is auto-generated by @hey-api/openapi-ts

import { Injectable } from '@angular/core';
import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { GetHealthzResponse, GetLivezResponse, GetReadyzResponse, GetMetricsResponse, TogetherServiceGenerateData, TogetherServiceGenerateResponse } from './types.gen';

@Injectable({
    providedIn:'root'
})
export class InfrastructureService {
    /**
     * Health check endpoint. Expecting an empty response with status code <code>200</code> when the service is in health state. The <code>/healthz</code> endpoint is <b>deprecated</b>. (since Kubernetes v1.16)
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getHealthz(): CancelablePromise<GetHealthzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/healthz'
        });
    }
    
    /**
     * Health check endpoint for Kubernetes. Healthy endpoint responses with a <code>200</code> OK status.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getLivez(): CancelablePromise<GetLivezResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/livez'
        });
    }
    
    /**
     * A <code>200</code> OK status from <code>/readyz</code> endpoint indicated the service is ready to accept traffic. From that point and onward, Kubernetes will use <code>/livez</code> endpoint to perform periodic health checks.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getReadyz(): CancelablePromise<GetReadyzResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/readyz'
        });
    }
    
    /**
     * Prometheus metrics endpoint. The <code>/metrics</code> responses with a <code>200</code>. The output can then be used by a Prometheus sidecar to scrape the metrics of the service.
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getMetrics(): CancelablePromise<GetMetricsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/metrics'
        });
    }
    
}
@Injectable({
    providedIn:'root'
})
export class ServiceApIsService {
    /**
     * @param data The data for the request.
     * @param data.formData
     * @returns binary Successful Response
     * @throws ApiError
     */
    public static togetherServiceGenerate(data: TogetherServiceGenerateData = {}): CancelablePromise<TogetherServiceGenerateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/generate',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                400: 'Bad Request',
                404: 'Not Found',
                500: 'Internal Server Error'
            }
        });
    }
    
}